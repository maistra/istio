// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: security/v1/trustbundle.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TrustBundle struct {
	TrustDomain string `protobuf:"bytes,1,opt,name=trust_domain,json=trustDomain,proto3" json:"trust_domain,omitempty"`
	// PEM-encoded root cert
	RootCert             string   `protobuf:"bytes,2,opt,name=root_cert,json=rootCert,proto3" json:"root_cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrustBundle) Reset()         { *m = TrustBundle{} }
func (m *TrustBundle) String() string { return proto.CompactTextString(m) }
func (*TrustBundle) ProtoMessage()    {}
func (*TrustBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_92c0df365cdc5ea2, []int{0}
}
func (m *TrustBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrustBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrustBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrustBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrustBundle.Merge(m, src)
}
func (m *TrustBundle) XXX_Size() int {
	return m.Size()
}
func (m *TrustBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_TrustBundle.DiscardUnknown(m)
}

var xxx_messageInfo_TrustBundle proto.InternalMessageInfo

func (m *TrustBundle) GetTrustDomain() string {
	if m != nil {
		return m.TrustDomain
	}
	return ""
}

func (m *TrustBundle) GetRootCert() string {
	if m != nil {
		return m.RootCert
	}
	return ""
}

type TrustBundleRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrustBundleRequest) Reset()         { *m = TrustBundleRequest{} }
func (m *TrustBundleRequest) String() string { return proto.CompactTextString(m) }
func (*TrustBundleRequest) ProtoMessage()    {}
func (*TrustBundleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92c0df365cdc5ea2, []int{1}
}
func (m *TrustBundleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrustBundleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrustBundleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrustBundleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrustBundleRequest.Merge(m, src)
}
func (m *TrustBundleRequest) XXX_Size() int {
	return m.Size()
}
func (m *TrustBundleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrustBundleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrustBundleRequest proto.InternalMessageInfo

type TrustBundleResponse struct {
	TrustBundles         []*TrustBundle `protobuf:"bytes,13,rep,name=trust_bundles,json=trustBundles,proto3" json:"trust_bundles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TrustBundleResponse) Reset()         { *m = TrustBundleResponse{} }
func (m *TrustBundleResponse) String() string { return proto.CompactTextString(m) }
func (*TrustBundleResponse) ProtoMessage()    {}
func (*TrustBundleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92c0df365cdc5ea2, []int{2}
}
func (m *TrustBundleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrustBundleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrustBundleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrustBundleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrustBundleResponse.Merge(m, src)
}
func (m *TrustBundleResponse) XXX_Size() int {
	return m.Size()
}
func (m *TrustBundleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TrustBundleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TrustBundleResponse proto.InternalMessageInfo

func (m *TrustBundleResponse) GetTrustBundles() []*TrustBundle {
	if m != nil {
		return m.TrustBundles
	}
	return nil
}

func init() {
	proto.RegisterType((*TrustBundle)(nil), "maistra.security.v1.TrustBundle")
	proto.RegisterType((*TrustBundleRequest)(nil), "maistra.security.v1.TrustBundleRequest")
	proto.RegisterType((*TrustBundleResponse)(nil), "maistra.security.v1.TrustBundleResponse")
}

func init() { proto.RegisterFile("security/v1/trustbundle.proto", fileDescriptor_92c0df365cdc5ea2) }

var fileDescriptor_92c0df365cdc5ea2 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x4e, 0x4d, 0x2e,
	0x2d, 0xca, 0x2c, 0xa9, 0xd4, 0x2f, 0x33, 0xd4, 0x2f, 0x29, 0x2a, 0x2d, 0x2e, 0x49, 0x2a, 0xcd,
	0x4b, 0xc9, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xce, 0x4d, 0xcc, 0x2c, 0x2e,
	0x29, 0x4a, 0xd4, 0x83, 0x29, 0xd3, 0x2b, 0x33, 0x54, 0xf2, 0xe5, 0xe2, 0x0e, 0x01, 0xa9, 0x74,
	0x02, 0xab, 0x14, 0x52, 0xe4, 0xe2, 0x01, 0x6b, 0x8c, 0x4f, 0xc9, 0xcf, 0x4d, 0xcc, 0xcc, 0x93,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x06, 0x8b, 0xb9, 0x80, 0x85, 0x84, 0xa4, 0xb9, 0x38,
	0x8b, 0xf2, 0xf3, 0x4b, 0xe2, 0x93, 0x53, 0x8b, 0x4a, 0x24, 0x98, 0xc0, 0xf2, 0x1c, 0x20, 0x01,
	0xe7, 0xd4, 0xa2, 0x12, 0x25, 0x11, 0x2e, 0x21, 0x24, 0xe3, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0x94, 0x62, 0xb8, 0x84, 0x51, 0x44, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x5c, 0xb9,
	0x78, 0x21, 0x96, 0x41, 0x9c, 0x59, 0x2c, 0xc1, 0xab, 0xc0, 0xac, 0xc1, 0x6d, 0xa4, 0xa0, 0x87,
	0xc5, 0xa1, 0x7a, 0xc8, 0x06, 0x40, 0xdc, 0x08, 0xe1, 0x14, 0x1b, 0xd5, 0xa0, 0xd8, 0x19, 0x9c,
	0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0x94, 0xc6, 0xc5, 0xef, 0x9e, 0x5a, 0x82, 0x24, 0x51, 0x2c,
	0xa4, 0x4e, 0xd0, 0x60, 0x88, 0x7b, 0xa5, 0x34, 0x08, 0x2b, 0x84, 0x78, 0x41, 0x89, 0xc1, 0x49,
	0xe3, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x8c, 0x92, 0x82,
	0x69, 0xcc, 0xcc, 0xd7, 0x4f, 0x2c, 0xc8, 0xd4, 0x47, 0x8a, 0x91, 0x24, 0x36, 0x70, 0x34, 0x18,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x09, 0x9e, 0x74, 0xa7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrustBundleServiceClient is the client API for TrustBundleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrustBundleServiceClient interface {
	GetTrustBundles(ctx context.Context, in *TrustBundleRequest, opts ...grpc.CallOption) (*TrustBundleResponse, error)
}

type trustBundleServiceClient struct {
	cc *grpc.ClientConn
}

func NewTrustBundleServiceClient(cc *grpc.ClientConn) TrustBundleServiceClient {
	return &trustBundleServiceClient{cc}
}

func (c *trustBundleServiceClient) GetTrustBundles(ctx context.Context, in *TrustBundleRequest, opts ...grpc.CallOption) (*TrustBundleResponse, error) {
	out := new(TrustBundleResponse)
	err := c.cc.Invoke(ctx, "/maistra.security.v1.TrustBundleService/GetTrustBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustBundleServiceServer is the server API for TrustBundleService service.
type TrustBundleServiceServer interface {
	GetTrustBundles(context.Context, *TrustBundleRequest) (*TrustBundleResponse, error)
}

// UnimplementedTrustBundleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTrustBundleServiceServer struct {
}

func (*UnimplementedTrustBundleServiceServer) GetTrustBundles(ctx context.Context, req *TrustBundleRequest) (*TrustBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustBundles not implemented")
}

func RegisterTrustBundleServiceServer(s *grpc.Server, srv TrustBundleServiceServer) {
	s.RegisterService(&_TrustBundleService_serviceDesc, srv)
}

func _TrustBundleService_GetTrustBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrustBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustBundleServiceServer).GetTrustBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maistra.security.v1.TrustBundleService/GetTrustBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustBundleServiceServer).GetTrustBundles(ctx, req.(*TrustBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrustBundleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maistra.security.v1.TrustBundleService",
	HandlerType: (*TrustBundleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrustBundles",
			Handler:    _TrustBundleService_GetTrustBundles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security/v1/trustbundle.proto",
}

func (m *TrustBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrustBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrustBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RootCert) > 0 {
		i -= len(m.RootCert)
		copy(dAtA[i:], m.RootCert)
		i = encodeVarintTrustbundle(dAtA, i, uint64(len(m.RootCert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TrustDomain) > 0 {
		i -= len(m.TrustDomain)
		copy(dAtA[i:], m.TrustDomain)
		i = encodeVarintTrustbundle(dAtA, i, uint64(len(m.TrustDomain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrustBundleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrustBundleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrustBundleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *TrustBundleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrustBundleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrustBundleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TrustBundles) > 0 {
		for iNdEx := len(m.TrustBundles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustBundles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrustbundle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrustbundle(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrustbundle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TrustBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TrustDomain)
	if l > 0 {
		n += 1 + l + sovTrustbundle(uint64(l))
	}
	l = len(m.RootCert)
	if l > 0 {
		n += 1 + l + sovTrustbundle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrustBundleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrustBundleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TrustBundles) > 0 {
		for _, e := range m.TrustBundles {
			l = e.Size()
			n += 1 + l + sovTrustbundle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTrustbundle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrustbundle(x uint64) (n int) {
	return sovTrustbundle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TrustBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrustbundle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrustBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrustBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrustbundle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrustbundle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrustbundle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrustbundle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrustbundle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrustbundle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrustbundle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrustbundle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrustBundleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrustbundle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrustBundleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrustBundleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTrustbundle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrustbundle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrustBundleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrustbundle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrustBundleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrustBundleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustBundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrustbundle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrustbundle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrustbundle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustBundles = append(m.TrustBundles, &TrustBundle{})
			if err := m.TrustBundles[len(m.TrustBundles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrustbundle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrustbundle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrustbundle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrustbundle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrustbundle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrustbundle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrustbundle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrustbundle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrustbundle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrustbundle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrustbundle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrustbundle = fmt.Errorf("proto: unexpected end of group")
)
