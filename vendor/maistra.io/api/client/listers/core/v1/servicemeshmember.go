// Copyright Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "maistra.io/api/core/v1"
)

// ServiceMeshMemberLister helps list ServiceMeshMembers.
// All objects returned here must be treated as read-only.
type ServiceMeshMemberLister interface {
	// List lists all ServiceMeshMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ServiceMeshMember, err error)
	// ServiceMeshMembers returns an object that can list and get ServiceMeshMembers.
	ServiceMeshMembers(namespace string) ServiceMeshMemberNamespaceLister
	ServiceMeshMemberListerExpansion
}

// serviceMeshMemberLister implements the ServiceMeshMemberLister interface.
type serviceMeshMemberLister struct {
	indexer cache.Indexer
}

// NewServiceMeshMemberLister returns a new ServiceMeshMemberLister.
func NewServiceMeshMemberLister(indexer cache.Indexer) ServiceMeshMemberLister {
	return &serviceMeshMemberLister{indexer: indexer}
}

// List lists all ServiceMeshMembers in the indexer.
func (s *serviceMeshMemberLister) List(selector labels.Selector) (ret []*v1.ServiceMeshMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceMeshMember))
	})
	return ret, err
}

// ServiceMeshMembers returns an object that can list and get ServiceMeshMembers.
func (s *serviceMeshMemberLister) ServiceMeshMembers(namespace string) ServiceMeshMemberNamespaceLister {
	return serviceMeshMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceMeshMemberNamespaceLister helps list and get ServiceMeshMembers.
// All objects returned here must be treated as read-only.
type ServiceMeshMemberNamespaceLister interface {
	// List lists all ServiceMeshMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ServiceMeshMember, err error)
	// Get retrieves the ServiceMeshMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ServiceMeshMember, error)
	ServiceMeshMemberNamespaceListerExpansion
}

// serviceMeshMemberNamespaceLister implements the ServiceMeshMemberNamespaceLister
// interface.
type serviceMeshMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceMeshMembers in the indexer for a given namespace.
func (s serviceMeshMemberNamespaceLister) List(selector labels.Selector) (ret []*v1.ServiceMeshMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceMeshMember))
	})
	return ret, err
}

// Get retrieves the ServiceMeshMember from the indexer for a given namespace and name.
func (s serviceMeshMemberNamespaceLister) Get(name string) (*v1.ServiceMeshMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("servicemeshmember"), name)
	}
	return obj.(*v1.ServiceMeshMember), nil
}
