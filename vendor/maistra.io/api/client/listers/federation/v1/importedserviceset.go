// Copyright Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "maistra.io/api/federation/v1"
)

// ImportedServiceSetLister helps list ImportedServiceSets.
// All objects returned here must be treated as read-only.
type ImportedServiceSetLister interface {
	// List lists all ImportedServiceSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ImportedServiceSet, err error)
	// ImportedServiceSets returns an object that can list and get ImportedServiceSets.
	ImportedServiceSets(namespace string) ImportedServiceSetNamespaceLister
	ImportedServiceSetListerExpansion
}

// importedServiceSetLister implements the ImportedServiceSetLister interface.
type importedServiceSetLister struct {
	indexer cache.Indexer
}

// NewImportedServiceSetLister returns a new ImportedServiceSetLister.
func NewImportedServiceSetLister(indexer cache.Indexer) ImportedServiceSetLister {
	return &importedServiceSetLister{indexer: indexer}
}

// List lists all ImportedServiceSets in the indexer.
func (s *importedServiceSetLister) List(selector labels.Selector) (ret []*v1.ImportedServiceSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ImportedServiceSet))
	})
	return ret, err
}

// ImportedServiceSets returns an object that can list and get ImportedServiceSets.
func (s *importedServiceSetLister) ImportedServiceSets(namespace string) ImportedServiceSetNamespaceLister {
	return importedServiceSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImportedServiceSetNamespaceLister helps list and get ImportedServiceSets.
// All objects returned here must be treated as read-only.
type ImportedServiceSetNamespaceLister interface {
	// List lists all ImportedServiceSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ImportedServiceSet, err error)
	// Get retrieves the ImportedServiceSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ImportedServiceSet, error)
	ImportedServiceSetNamespaceListerExpansion
}

// importedServiceSetNamespaceLister implements the ImportedServiceSetNamespaceLister
// interface.
type importedServiceSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImportedServiceSets in the indexer for a given namespace.
func (s importedServiceSetNamespaceLister) List(selector labels.Selector) (ret []*v1.ImportedServiceSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ImportedServiceSet))
	})
	return ret, err
}

// Get retrieves the ImportedServiceSet from the indexer for a given namespace and name.
func (s importedServiceSetNamespaceLister) Get(name string) (*v1.ImportedServiceSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("importedserviceset"), name)
	}
	return obj.(*v1.ImportedServiceSet), nil
}
