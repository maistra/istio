/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// ReferencePolicyLister helps list ReferencePolicies.
// All objects returned here must be treated as read-only.
type ReferencePolicyLister interface {
	// List lists all ReferencePolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.ReferencePolicy, err error)
	// ReferencePolicies returns an object that can list and get ReferencePolicies.
	ReferencePolicies(namespace string) ReferencePolicyNamespaceLister
	ReferencePolicyListerExpansion
}

// referencePolicyLister implements the ReferencePolicyLister interface.
type referencePolicyLister struct {
	indexer cache.Indexer
}

// NewReferencePolicyLister returns a new ReferencePolicyLister.
func NewReferencePolicyLister(indexer cache.Indexer) ReferencePolicyLister {
	return &referencePolicyLister{indexer: indexer}
}

// List lists all ReferencePolicies in the indexer.
func (s *referencePolicyLister) List(selector labels.Selector) (ret []*v1alpha2.ReferencePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.ReferencePolicy))
	})
	return ret, err
}

// ReferencePolicies returns an object that can list and get ReferencePolicies.
func (s *referencePolicyLister) ReferencePolicies(namespace string) ReferencePolicyNamespaceLister {
	return referencePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReferencePolicyNamespaceLister helps list and get ReferencePolicies.
// All objects returned here must be treated as read-only.
type ReferencePolicyNamespaceLister interface {
	// List lists all ReferencePolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.ReferencePolicy, err error)
	// Get retrieves the ReferencePolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.ReferencePolicy, error)
	ReferencePolicyNamespaceListerExpansion
}

// referencePolicyNamespaceLister implements the ReferencePolicyNamespaceLister
// interface.
type referencePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReferencePolicies in the indexer for a given namespace.
func (s referencePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.ReferencePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.ReferencePolicy))
	})
	return ret, err
}

// Get retrieves the ReferencePolicy from the indexer for a given namespace and name.
func (s referencePolicyNamespaceLister) Get(name string) (*v1alpha2.ReferencePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("referencepolicy"), name)
	}
	return obj.(*v1alpha2.ReferencePolicy), nil
}
