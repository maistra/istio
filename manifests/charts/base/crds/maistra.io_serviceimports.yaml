
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: serviceimports.maistra.io
spec:
  group: maistra.io
  names:
    kind: ServiceImports
    listKind: ServiceImportsList
    plural: serviceimports
    singular: serviceimports
  preserveUnknownFields: false
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: ServiceImports is the Schema for configuring imported services.  The name of the ServiceImports resource must match the name of a MeshFederation resource defining the remote mesh from which the services will be imported.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: Spec defines rules for matching services to be imported.
          properties:
            domainSuffix:
              description: 'DomainSuffix specifies the domain suffix to be applies to imported services.  If no domain suffix is specified, imported services will be named as follows:    <imported-name>.<imported-namespace>.svc.<mesh-name>-imports.local If a domain suffix is specified, imported services will be named as follows:    <imported-name>.<imported-namespace>.<domain-suffix>'
              type: string
            imports:
              description: Imports are the rules that determine which services are imported to the mesh.  The list is processed in order and the first spec in the list that applies to a service is the one that will be applied.  This allows more specific selectors to be placed before more general selectors.
              items:
                properties:
                  domainSuffix:
                    description: DomainSuffix applies the specified suffix to services imported by this rule.  The behavior is identical to that of ServiceImportsSpec.DomainSuffix.
                    type: string
                  importAsLocal:
                    description: ImportAsLocal imports the service as a local service in the mesh.  For example, if an exported service, foo/bar is imported as some-ns/service, the service will be imported as service.some-ns.svc.cluster.local in the some-ns namespace.  If a service of this name already exists in the mesh, the imported service's endpoints will be aggregated with any other workloads associated with the service.  This setting overrides DomainSuffix.
                    type: boolean
                  nameSelector:
                    description: NameSelector provides a simple name matcher for importing services in the mesh.
                    properties:
                      alias:
                        properties:
                          name:
                            type: string
                          namespace:
                            type: string
                        type: object
                      name:
                        properties:
                          name:
                            type: string
                          namespace:
                            type: string
                        type: object
                    type: object
                  type:
                    description: Type of rule.  Only Name type is supported.
                    type: string
                required:
                - type
                type: object
              type: array
          type: object
        status:
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
